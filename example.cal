proc Foo(entry: "main") {
    link stdio;
    link vector;

    static .cstr hello_message = "Hello World\n";    

    glob fn main(.i32 argc, .ptr_ptr argv) .i32 {
        stdio.print_str(hello_message);

        stack .i32_ptr buffer = $buffer{ .i32, 10 };
        stack .i32 size = 10;
        stack .i32 index = 0;

        populate_fib(buffer+1, size-1, 0, 1);
        
        for(index = 0; index<size; index++){
            stdio.print_i32( [ buffer + index ] );

            if(index + 1 < size){
                stdio.putch(',');
                stdio.putch(' ');
            }
        } 
        
        stdio.putch('\n');

        stack $struct{vector.vec2} position;
        vector.vec2_set(@position, 11, 43);
        vector.vec2_print(@position);
        stdio.putch('\n');

        return 0;
    }

    fn populate_fib(.i32_ptr buffer, .i32 size, .i32 a, .i32 b) {
        if(size <= 0){
            return;
        }

        [buffer] = (a + b);
    
        populate_fib(buffer+1, size-1, b, a+b);
    }
}

lib vector {
    link stdio;

    glob struct vec2 {
        .f32 x;
        .f32 y;
    }

    glob fn vec2_set(.ptr this, .f32 x, .f32 y) {
        [.f32_ptr this + $struct{vec2, x}] = x;
        [.f32_ptr this + $struct{vec2, y}] = y;
    }

    glob fn vec2_print(.ptr this){
        stdio.print_f32([.f32_ptr this + $struct{vec2, x}]);
        stdio.putch(',');
        stdio.print_f32([.f32_ptr this + $struct{vec2, y}]);
    }

}

lib stdio {
    c_include "stdio.h";

    glob fn print_str(.cstr ptr) {
        stack .cstr fmt = "%s";
        $c{{ printf(fmt, ptr); }};
    }
    glob fn print_i32(.i32 val) {
        stack .cstr fmt = "%d";
        $c{{ printf(fmt, val); }};
    }
    glob fn print_f32(.f32 val){
        stack .cstr fmt = "%f";
        $c{{ printf(fmt, val); }};
    }
    glob fn putch(.i8 ch) {
        $c{{ putchar(ch); }};
    }
}

