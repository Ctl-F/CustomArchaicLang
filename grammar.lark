?start: (proc_unit|lib_unit|test_unit)+

value: NUMBER
    | STRING
    | "true" -> true
    | "false" -> false
    | "null" -> null
    | CHAR
    // add other stuff here

static_array: "{" [value [("," value)+] ] "}"

keyval_pair: NAME ":" value
?keyval_list: keyval_pair [("," keyval_pair)+]


param: TYPE NAME
param_list: param [("," param)+]

?argument: assignment
?argument_list: argument [("," argument)+]

proc_unit: "proc" NAME [ "(" keyval_list ")" ] unit_body -> begin_proc

lib_unit: "lib" NAME unit_body -> begin_lib
test_unit: "test" NAME ";" -> begin_test
unit_body: "{" toplevel_stmt* "}"


?toplevel_stmt: link_stmt ";"
    | static_allocation ";"
    | func_def
    | raw_c_statement

link_stmt: "link" NAME [ ("," NAME)+ ] -> link
    | "c_include" STRING -> c_include

func_def: GLOBAL? "fn" NAME "(" [param_list] ")" TYPE? func_body -> function
func_body: "{" statement* "}" -> function_body
func_call: lvalue "(" argument_list? ")"

static_allocation: "static" TYPE NAME [ "=" (value | static_array) ]
stack_allocation: "stack" TYPE NAME [ "=" (value | static_array) ]

GLOBAL: "glob"

static_offset: "+" -> static_plus
    | "-" -> static_minus

?lvalue: [NAME "."] NAME -> var
    | "[" [ "(" TYPE ")" ] [NAME "."] NAME (static_offset (NUMBER | NAME))* "]" -> deref_var
    | "[" [ "(" TYPE ")" ] func_call (static_offset (NUMBER | NAME))* "]" -> deref_func_call

expression: assignment

?assignment: logic_eq
    | lvalue "+=" logic_eq -> plus_eq
    | lvalue "-=" logic_eq -> minus_eq
    | lvalue "*=" logic_eq -> mul_eq
    | lvalue "/=" logic_eq -> div_eq
    | lvalue "%=" logic_eq -> mod_eq
    | lvalue "=" logic_eq -> assign

?logic_eq: logic_andor
    | logic_eq "==" logic_andor -> logic_equals
    | logic_eq "!=" logic_andor -> logic_notequals

?logic_andor: logic_cmp
    | logic_andor "&&" logic_cmp -> logic_and
    | logic_andor "||" logic_cmp -> logic_or

?logic_cmp: sum
    | logic_cmp ">=" sum -> logic_ge
    | logic_cmp "<=" sum -> logic_le
    | logic_cmp ">" sum -> logic_gt
    | logic_cmp "<" sum -> logic_lt

?sum: product
    | sum "+" product -> add
    | sum "-" product -> sub

?product: atom
    | product "*" atom -> mul
    | product "/" atom -> div
    | product "%" atom -> mod

?atom: value
    | "-" atom -> neg
    | "!" atom -> not
    | "@" lvalue -> ref
    | func_call
    | lvalue
    | atom "++" -> post_inc
    | atom "--" -> post_dec
    | "++" atom -> pre_inc
    | "--" atom -> pre_dec
    | "(" sum ")" -> group

?statement: stack_allocation ";"
    | expression ";"
    | if_statement
    | while_statement
    | do_while_statement
    | for_statement
    | return_statement
    | raw_c_statement

if_statement: "if" expression "{" statement* "}" else_branch*
else_branch: "else" if_statement -> else_if
    | "else" "{" statement* "}"

loop_flow_stmt: "break" ";" -> break
    | "continue" ";" -> continue

return_statement: "return" expression? ";"

while_statement: "while" expression "{" (statement|loop_flow_stmt)* "}"
do_while_statement: "do" "{" (statement|loop_flow_stmt)* "}" "while" expression
for_statement: "for" "(" param* ";" expression ";" expression* ")" "{" (statement|loop_flow_stmt)* "}"

INLINE_C_BODY: /\$c\{\{.*\}\}/

raw_c_statement: INLINE_C_BODY ";"

TYPE: ".cstr"
    | ".i32"
    | ".i64"
    | ".i8" 
    | ".i16"
    | ".f32"
    | ".f64"
    | ".ptr"
    | ".byte_ptr"
    | ".word_ptr"
    | ".dword_ptr"
    | ".qword_ptr"

CHAR: /'\\?.'/

%import common.CNAME -> NAME
%import common.NUMBER -> NUMBER
%import common.WS -> WS
%import common.CPP_COMMENT -> SLINE_COMMENT
%import common.C_COMMENT   -> MLINE_COMMENT
%import common.ESCAPED_STRING -> STRING

%ignore WS
%ignore SLINE_COMMENT
%ignore MLINE_COMMENT