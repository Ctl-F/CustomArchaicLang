lib strings {
    link stdmem;

    glob struct StringView {
        .cstr start;
        .cstr end;
    }

    errcodes StringError { IndexOutOfBounds }

    glob fn Length(.cstr string) $result{ .i64 }{
        if string == 0 {
            return $err{ stdmem.MemoryError.NullPointer };
        }
        stack .i64 length = 0;

        while [string] {
            string++;
            length++;
        }
        
        return $ok{ length };
    }

    glob fn ViewLength(.ptr str) .i64 {
        stack .cstr start;
        stack .cstr end;
        start = [.ptr_ptr str + $struct{StringView, start}];
        end = [.ptr_ptr str + $struct{StringView, end}];

        return end - start;
    }

    glob fn CharAt(.cstr string, .i64 index) $result{ .i8 } {
        if string == 0 {
            return $err{ stdmem.MemoryError.NullPointer };
        }
        stack .i64 length;

        Length(string) ? (.i64 len){
            length = len;
        }
        catch(err) {
            return $err{err};
        }

        if index < 0 || index >= length {
            return $err{ StringError.IndexOutOfBounds };
        }

        return $ok{ [string + index] };
    }

    glob fn ViewCharAt(.ptr view, .i64 index) $result{.i8} {
        if view == 0 {
            return $err{ stdmem.MemoryError.NullPointer };
        }
        stack .i64 length;

        length = ViewLength(view);

        if index < 0 || index >= length {
            return $err{ StringError.IndexOutOfBounds };
        }
        
        stack .cstr begin;
        begin = [.ptr_ptr view + $struct{StringView, start}];

        return [ begin + index ];
    }

    glob fn ToView(.cstr string) $struct{StringView} {
        stack $struct{StringView} view;
        stack .ptr addr;
        addr = @view;

        [.ptr_ptr addr + $struct{StringView, start}] = string;

        Length(string) ? (.i64 len) {
            [.ptr_ptr addr + $struct{StringView, end}] = string + len;
        }
        catch(err){
            [.ptr_ptr addr + $struct{StringView, end}] = string;
        }

        return view;
    }

    glob fn Substr(.cstr string, .i64 start, .i64 count) $result{ StringView }{

    }

}