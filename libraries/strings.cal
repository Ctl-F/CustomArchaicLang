lib strings {
    link stdmem;

    glob struct string {
        .i64 length;
        .cstr data;
    }

    errcodes StringError { IndexOutOfBounds }

    /// Creates an owned string pointer, in that it copies the 
    glob fn NewString(.cstr data) $result{string} {
        stack .i64 string_length;
        stack $struct{string} new_string;
        stack .ptr cursor;
        cursor = @new_string;

        StrLenC(data) ? (.i64 len) {
            string_length = len;
        }
        catch (err) {
            return $err{err};
        };

        [.i64_ptr cursor + $struct{string, length}] = string_length;

        stdmem.AllocateBuffer(string_length + 1) ? (.ptr ok) {
            [.ptr_ptr cursor + $struct{string, data}] = ok;
        }
        catch (err) {
            return $err{err};
        };

        stdmem.Copy(data, data+string_length, [.ptr_ptr cursor + $struct{string, data}]) ? { }
        catch(err){
            stdmem.FreeBuffer( [.ptr_ptr cursor + $struct{string, data}] );
            return $err{err};
        };

        cursor = [.ptr_ptr cursor + $struct{string, data}];
        [.cstr cursor + string_length] = 0;
        return $ok{new_string};
    }

    glob fn DeleteString(.ptr str) {
        if str == 0 {
            return;
        }

        [.i64_ptr str + $struct{string, length}] = 0;
        stdmem.FreeBuffer( [.ptr_ptr str + $struct{string, data}] );
        [.ptr_ptr str + $struct{string, data}] = 0;
    }

    glob fn GetCharAt(.ptr str, .i64 index) $result{.i8} {
        if str == 0 {
            return $err{ stdmem.MemoryError.NullPointer };
        }

        stack .i64 length;
        length = [.i64_ptr str + $struct{string, length}];
        if index < 0 || index >= length {
            return $err{ StringError.IndexOutOfBounds };
        }

        stack .cstr data_ptr;
        data_ptr = [.ptr_ptr str + $struct{string, data} ];

        return $ok{ [.i8_ptr data_ptr + index] };
    }

    glob fn SetCharAt(.ptr str, .i64 index, .i8 ch) $result{void} {
        if str == 0 {
            return $err{ stdmem.MemoryError.NullPointer };
        }

        stack .i64 length;
        length = [.i64_ptr str + $struct{string, length}];

        if index < 0 || index >= length {
            return $err{ StringError.IndexOutOfBounds };
        }
        
        stack .cstr data_ptr;
        data_ptr = [.ptr_ptr str + $struct{string, data} ];
        [.i8_ptr data_ptr + index] = ch;

        return $ok{};
    }

    glob fn StrLenC(.cstr str) $result{.i64} {
        stack .i64 length = 0;

        if str == 0 {
            return $err{ stdmem.MemoryError.NullPointer };
        }

        while [str] != 0 {
            length++;
            str++;
        }

        return $ok{length};
    }

}